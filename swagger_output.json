{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read_pets": "read your pets",
        "write_pets": "modify pets in your account"
      }
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint para obter um usuário.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do usuário."
          },
          {
            "name": "filtro",
            "in": "query",
            "description": "Um filtro qualquer.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário encontrado.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint para adicionar um usuário.",
        "parameters": [
          {
            "name": "newUser",
            "in": "body",
            "description": "Informações do usuário.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Usuário registrado com sucesso!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/on": {
      "post": {
        "tags": [
          "Smart Light"
        ],
        "description": "Endpoint to turn on the smart light.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Smart light turned on successfully."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/off": {
      "post": {
        "tags": [
          "Smart Light"
        ],
        "description": "Endpoint to turn off the smart light.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Smart light turned off successfully."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/brightness": {
      "put": {
        "tags": [
          "Smart Light"
        ],
        "description": "Endpoint to set the brightness level of the smart light.",
        "parameters": [
          {
            "name": "brightness",
            "in": "body",
            "description": "The brightness level to set, from 1 to 100.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrightnessLevel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brightness level set successfully."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}": {
      "delete": {
        "tags": [
          "Smart Light"
        ],
        "description": "Endpoint to delete a smart light.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the smart light to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Smart light deleted successfully."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ac/temperature": {
      "get": {
        "tags": [
          "Smart AC"
        ],
        "description": "Endpoint to get the current temperature of the AC.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current temperature retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "temperature": {
                  "type": "number",
                  "example": 25
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Smart AC"
        ],
        "description": "Endpoint to set the target temperature of the AC.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "temperature": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Target temperature set successfully."
          }
        }
      }
    },
    "/ac/power": {
      "get": {
        "tags": [
          "Smart AC"
        ],
        "description": "Endpoint to get the current power state of the AC.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current power state retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "powerState": {
                  "type": "boolean",
                  "example": true
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Smart AC"
        ],
        "description": "Endpoint to turn the AC on or off.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "powerState": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Power state set successfully."
          }
        }
      }
    },
    "/ac/mode": {
      "get": {
        "tags": [
          "Smart AC"
        ],
        "description": "Endpoint to get the current mode of the AC.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current mode retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "example": "cooling"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/ironing-almirah/status": {
      "get": {
        "tags": [
          "Smart Ironing Almirah"
        ],
        "description": "Endpoint to get the current status of the ironing almirah.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current status retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "in use"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/ironing-almirah/start-ironing": {
      "post": {
        "tags": [
          "Smart Ironing Almirah"
        ],
        "description": "Endpoint to start a new ironing cycle in the almirah.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "New cycle started successfully."
          }
        }
      }
    },
    "/ironing-almirah/stop-ironing": {
      "post": {
        "tags": [
          "Smart Ironing Almirah"
        ],
        "description": "Endpoint to stop the current ironing cycle in the almirah.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current cycle stopped successfully."
          }
        }
      }
    },
    "/ironing-almirah/time": {
      "put": {
        "tags": [
          "Smart Ironing Almirah"
        ],
        "description": "Endpoint to set the desired ironing time for the almirah.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "time": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ironing time set successfully."
          }
        }
      }
    },
    "/ironing-almirah/history": {
      "get": {
        "tags": [
          "Smart Ironing Almirah"
        ],
        "description": "Endpoint to get the ironing history for the almirah.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ironing history retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "history": {
                  "type": "array",
                  "example": [],
                  "items": {}
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/forcedEndpoint/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "Endpoint forçado",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID do Usuário"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Informações do usuário",
            "schema": {
              "$ref": "#/definitions/AddUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "parents": {
          "type": "object",
          "properties": {
            "father": {
              "type": "string",
              "example": "Simon Doe"
            },
            "mother": {
              "type": "string",
              "example": "Marie Doe"
            }
          }
        },
        "diplomas": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "school": {
                "type": "string",
                "example": "XYZ University"
              },
              "year": {
                "type": "number",
                "example": 2020
              },
              "completed": {
                "type": "boolean",
                "example": true
              },
              "internship": {
                "type": "object",
                "properties": {
                  "hours": {
                    "type": "number",
                    "example": 290
                  },
                  "location": {
                    "type": "string",
                    "example": "XYZ Company"
                  }
                }
              }
            }
          }
        }
      }
    },
    "AddUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "age": {
          "type": "number",
          "example": 29
        },
        "about": {
          "type": "string",
          "example": ""
        }
      },
      "required": [
        "name",
        "age"
      ]
    }
  }
}